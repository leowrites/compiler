#!/usr/bin/python3
#
# Assignment 3 Private tester
#
# Tests a program path and against an expected output
#

import marker
import re

test_opt = '--print-ast'

abs_path = '' # Optional absolute path prefix

test_cases = [
    ['public_tests/var.c',b'MiniCProg [syslibFlag=0] (3, 0)\n|-VarDecl (3, 0)\n  |-TypeReference: [val=int] (3, 0)\n  |-VarRef (3, 4)\n    |-Identifier [name=alice] (3, 4)\n  |-VarRef (3, 11)\n    |-Identifier [name=bob] (3, 11)\n  |-VarRef (3, 16)\n    |-Identifier [name=charlie] (3, 16)\n|-VarDecl (4, 0)\n  |-TypeReference: [val=bool] (4, 0)\n  |-VarRef (4, 5)\n    |-Identifier [name=zeta] (4, 5)\n|-FuncDecl [hasBody=1] (6, 0)\n  |-TypeReference: [val=void] (6, 0)\n  |-Identifier [name=main] (6, 5)\n  |-ScopeStatement (6, 12)\n    |-ExprStmt (7, 4)\n      |-AssignmentExpr (7, 4)\n        |-VarRef (7, 4)\n          |-Identifier [name=alice] (7, 4)\n        |-IntLiteralExpr [val=1] (7, 12)\n    |-ExprStmt (8, 4)\n      |-AssignmentExpr (8, 4)\n        |-VarRef (8, 4)\n          |-Identifier [name=bob] (8, 4)\n        |-IntLiteralExpr [val=2] (8, 10)\n    |-ExprStmt (9, 4)\n      |-AssignmentExpr (9, 4)\n        |-VarRef (9, 4)\n          |-Identifier [name=charlie] (9, 4)\n        |-IntLiteralExpr [val=3] (9, 14)\n    |-ExprStmt (10, 4)\n      |-AssignmentExpr (10, 4)\n        |-VarRef (10, 4)\n          |-Identifier [name=zeta] (10, 4)\n        |-BoolLiteralExpr [val=0] (10, 11)\n',1,     True],
    ['public_tests/var_loop.c', b"MiniCProg [syslibFlag=0] (3, 0)\n|-VarDecl (3, 0)\n  |-TypeReference: [val=int] (3, 0)\n  |-VarRef (3, 4)\n    |-Identifier [name=x] (3, 4)\n|-VarDecl (4, 0)\n  |-TypeReference: [val=int] (4, 0)\n  |-VarRef (4, 4)\n    |-Identifier [name=arr] (4, 4)\n    |-IntLiteralExpr [val=10] (4, 4)\n|-FuncDecl [hasBody=1] (6, 0)\n  |-TypeReference: [val=int] (6, 0)\n  |-Identifier [name=main] (6, 4)\n  |-ScopeStatement (6, 11)\n    |-ExprStmt (7, 4)\n      |-AssignmentExpr (7, 4)\n        |-VarRef (7, 4)\n          |-Identifier [name=x] (7, 4)\n        |-IntLiteralExpr [val=5] (7, 8)\n    |-ForStmt (8, 4)\n      |-AssignmentExpr (8, 9)\n        |-VarRef (8, 9)\n          |-Identifier [name=x] (8, 9)\n        |-IntLiteralExpr [val=0] (8, 13)\n      |-BinaryExpr [opcode='<'] (8, 16)\n        |-VarExpr (8, 16)\n          |-VarRef (8, 16)\n            |-Identifier [name=x] (8, 16)\n        |-IntLiteralExpr [val=10] (8, 20)\n      |-AssignmentExpr (8, 24)\n        |-VarRef (8, 24)\n          |-Identifier [name=x] (8, 24)\n        |-BinaryExpr [opcode='+'] (8, 28)\n          |-VarExpr (8, 28)\n            |-VarRef (8, 28)\n              |-Identifier [name=x] (8, 28)\n          |-IntLiteralExpr [val=1] (8, 32)\n      |-ExprStmt (9, 8)\n        |-AssignmentExpr (9, 8)\n          |-VarRef (9, 8)\n            |-Identifier [name=arr] (9, 8)\n            |-VarExpr (9, 12)\n              |-VarRef (9, 12)\n                |-Identifier [name=x] (9, 12)\n          |-VarExpr (9, 17)\n            |-VarRef (9, 17)\n              |-Identifier [name=x] (9, 17)\n    |-ReturnStmt (10, 4)\n      |-IntLiteralExpr [val=0] (10, 11)\n",2,True],
    ['public_tests/conds.c',b"MiniCProg [syslibFlag=1] (3, 0)\n|-FuncDecl [hasBody=1] (5, 0)\n  |-TypeReference: [val=bool] (5, 0)\n  |-Identifier [name=isTen] (5, 5)\n  |-Parameter (5, 11)\n    |-TypeReference: [val=int] (5, 11)\n    |-Identifier [name=a] (5, 15)\n  |-ScopeStatement (5, 18)\n    |-IfStmt (6, 4)\n      |-BinaryExpr [opcode='!='] (6, 8)\n        |-VarExpr (6, 8)\n          |-VarRef (6, 8)\n            |-Identifier [name=a] (6, 8)\n        |-IntLiteralExpr [val=10] (6, 13)\n      |-ReturnStmt (7, 8)\n        |-BoolLiteralExpr [val=0] (7, 15)\n    |-ReturnStmt (8, 4)\n      |-BoolLiteralExpr [val=1] (8, 11)\n|-FuncDecl [hasBody=1] (11, 0)\n  |-TypeReference: [val=int] (11, 0)\n  |-Identifier [name=main] (11, 4)\n  |-ScopeStatement (11, 11)\n    |-VarDecl (12, 4)\n      |-TypeReference: [val=int] (12, 4)\n      |-VarRef (12, 8)\n        |-Identifier [name=myScore] (12, 8)\n      |-VarRef (12, 17)\n        |-Identifier [name=yourScore] (12, 17)\n    |-ExprStmt (13, 4)\n      |-AssignmentExpr (13, 4)\n        |-VarRef (13, 4)\n          |-Identifier [name=myScore] (13, 4)\n        |-IntLiteralExpr [val=10] (13, 14)\n    |-ExprStmt (14, 4)\n      |-AssignmentExpr (14, 4)\n        |-VarRef (14, 4)\n          |-Identifier [name=yourScore] (14, 4)\n        |-UnaryExpr [opcode='-'] (14, 16)\n          |-IntLiteralExpr [val=10] (14, 17)\n    |-IfStmt (16, 4)\n      |-BinaryExpr [opcode='&&'] (16, 8)\n        |-CallExpr (16, 8)\n          |-Identifier [name=isTen] (16, 8)\n          |-VarExpr (16, 14)\n            |-VarRef (16, 14)\n              |-Identifier [name=myScore] (16, 14)\n        |-CallExpr (16, 26)\n          |-Identifier [name=isTen] (16, 26)\n          |-VarExpr (16, 32)\n            |-VarRef (16, 32)\n              |-Identifier [name=yourScore] (16, 32)\n      |-ScopeStatement (16, 44)\n        |-ExprStmt (17, 8)\n          |-CallExpr (17, 8)\n            |-Identifier [name=putint] (17, 8)\n            |-IntLiteralExpr [val=1] (17, 15)\n        |-ReturnStmt (18, 8)\n          |-IntLiteralExpr [val=1] (18, 15)\n    |-ExprStmt (20, 4)\n      |-CallExpr (20, 4)\n        |-Identifier [name=putint] (20, 4)\n        |-IntLiteralExpr [val=0] (20, 11)\n    |-ReturnStmt (21, 4)\n      |-IntLiteralExpr [val=0] (21, 11)\n",2,True],

    ['private_tests/easy.c', b"MiniCProg [syslibFlag=1] \n|-VarDecl \n  |-TypeReference: [val=bool] \n  |-VarRef \n    |-Identifier [name=alpha] \n  |-VarRef \n    |-Identifier [name=beta] \n|-VarDecl \n  |-TypeReference: [val=int] \n  |-VarRef \n    |-Identifier [name=delta] \n  |-VarRef \n    |-Identifier [name=epsilon] \n|-FuncDecl [hasBody=1] \n  |-TypeReference: [val=void] \n  |-Identifier [name=main] \n  |-ScopeStatement \n    |-ExprStmt \n      |-AssignmentExpr \n        |-VarRef \n          |-Identifier [name=alpha] \n        |-BoolLiteralExpr [val=1] \n    |-ExprStmt \n      |-AssignmentExpr \n        |-VarRef \n          |-Identifier [name=beta] \n        |-VarExpr \n          |-VarRef \n            |-Identifier [name=alpha] \n    |-ExprStmt \n      |-AssignmentExpr \n        |-VarRef \n          |-Identifier [name=delta] \n        |-UnaryExpr [opcode='-'] \n          |-IntLiteralExpr [val=1] \n    |-ExprStmt \n      |-AssignmentExpr \n        |-VarRef \n          |-Identifier [name=epsilon] \n        |-BinaryExpr [opcode='+'] \n          |-VarExpr \n            |-VarRef \n              |-Identifier [name=delta] \n          |-IntLiteralExpr [val=1] \n    |-ExprStmt \n      |-CallExpr \n        |-Identifier [name=putint] \n        |-VarExpr \n          |-VarRef \n            |-Identifier [name=delta] \n    |-ExprStmt \n      |-CallExpr \n        |-Identifier [name=putnewline] \n    |-ExprStmt \n      |-CallExpr \n        |-Identifier [name=putint] \n        |-VarExpr \n          |-VarRef \n            |-Identifier [name=epsilon] \n    |-ReturnStmt \n", 1, False],
    ['private_tests/coins.c', b"MiniCProg [syslibFlag=1] \n|-VarDecl \n  |-TypeReference: [val=int] \n  |-VarRef \n    |-Identifier [name=total] \n|-VarDecl \n  |-TypeReference: [val=int] \n  |-VarRef \n    |-Identifier [name=quarter] \n  |-VarRef \n    |-Identifier [name=dime] \n  |-VarRef \n    |-Identifier [name=nickel] \n|-FuncDecl [hasBody=1] \n  |-TypeReference: [val=int] \n  |-Identifier [name=main] \n  |-ScopeStatement \n    |-ExprStmt \n      |-AssignmentExpr \n        |-VarRef \n          |-Identifier [name=total] \n        |-IntLiteralExpr [val=100] \n    |-ExprStmt \n      |-AssignmentExpr \n        |-VarRef \n          |-Identifier [name=quarter] \n        |-IntLiteralExpr [val=25] \n    |-ExprStmt \n      |-AssignmentExpr \n        |-VarRef \n          |-Identifier [name=dime] \n        |-IntLiteralExpr [val=10] \n    |-ExprStmt \n      |-AssignmentExpr \n        |-VarRef \n          |-Identifier [name=nickel] \n        |-IntLiteralExpr [val=5] \n    |-ForStmt \n      |-BinaryExpr [opcode='!='] \n        |-VarExpr \n          |-VarRef \n            |-Identifier [name=total] \n        |-IntLiteralExpr [val=0] \n      |-ScopeStatement \n        |-IfStmt \n          |-BinaryExpr [opcode='<'] \n            |-VarExpr \n              |-VarRef \n                |-Identifier [name=total] \n            |-IntLiteralExpr [val=5] \n          |-BreakStmt \n        |-IfStmt \n          |-BinaryExpr [opcode='>'] \n            |-VarExpr \n              |-VarRef \n                |-Identifier [name=total] \n            |-BinaryExpr [opcode='-'] \n              |-VarExpr \n                |-VarRef \n                  |-Identifier [name=quarter] \n              |-IntLiteralExpr [val=1] \n          |-ExprStmt \n            |-AssignmentExpr \n              |-VarRef \n                |-Identifier [name=total] \n              |-BinaryExpr [opcode='-'] \n                |-VarExpr \n                  |-VarRef \n                    |-Identifier [name=total] \n                |-VarExpr \n                  |-VarRef \n                    |-Identifier [name=quarter] \n          |-ScopeStatement \n            |-IfStmt \n              |-BinaryExpr [opcode='>'] \n                |-VarExpr \n                  |-VarRef \n                    |-Identifier [name=total] \n                |-BinaryExpr [opcode='-'] \n                  |-VarExpr \n                    |-VarRef \n                      |-Identifier [name=dime] \n                  |-IntLiteralExpr [val=1] \n              |-ExprStmt \n                |-AssignmentExpr \n                  |-VarRef \n                    |-Identifier [name=total] \n                  |-BinaryExpr [opcode='-'] \n                    |-VarExpr \n                      |-VarRef \n                        |-Identifier [name=total] \n                    |-VarExpr \n                      |-VarRef \n                        |-Identifier [name=dime] \n              |-ScopeStatement \n                |-IfStmt \n                  |-BinaryExpr [opcode='>'] \n                    |-VarExpr \n                      |-VarRef \n                        |-Identifier [name=total] \n                    |-BinaryExpr [opcode='-'] \n                      |-VarExpr \n                        |-VarRef \n                          |-Identifier [name=nickel] \n                      |-IntLiteralExpr [val=1] \n                  |-ExprStmt \n                    |-AssignmentExpr \n                      |-VarRef \n                        |-Identifier [name=total] \n                      |-BinaryExpr [opcode='-'] \n                        |-VarExpr \n                          |-VarRef \n                            |-Identifier [name=total] \n                        |-VarExpr \n                          |-VarRef \n                            |-Identifier [name=nickel] \n    |-ExprStmt \n      |-CallExpr \n        |-Identifier [name=putint] \n        |-VarExpr \n          |-VarRef \n            |-Identifier [name=total] \n    |-ExprStmt \n      |-CallExpr \n        |-Identifier [name=putnewline] \n    |-ReturnStmt \n      |-IntLiteralExpr [val=0] \n", 2, False],
    ['private_tests/fib.c', b"MiniCProg [syslibFlag=1] \n|-VarDecl \n  |-TypeReference: [val=int] \n  |-VarRef \n    |-Identifier [name=i] \n  |-VarRef \n    |-Identifier [name=result] \n|-FuncDecl [hasBody=1] \n  |-TypeReference: [val=int] \n  |-Identifier [name=fib] \n  |-Parameter \n    |-TypeReference: [val=int] \n    |-Identifier [name=t] \n  |-ScopeStatement \n    |-IfStmt \n      |-BinaryExpr [opcode='<'] \n        |-VarExpr \n          |-VarRef \n            |-Identifier [name=t] \n        |-IntLiteralExpr [val=1] \n      |-ReturnStmt \n        |-IntLiteralExpr [val=0] \n    |-IfStmt \n      |-BinaryExpr [opcode='=='] \n        |-VarExpr \n          |-VarRef \n            |-Identifier [name=t] \n        |-IntLiteralExpr [val=1] \n      |-ReturnStmt \n        |-IntLiteralExpr [val=1] \n    |-ReturnStmt \n      |-BinaryExpr [opcode='+'] \n        |-CallExpr \n          |-Identifier [name=fib] \n          |-BinaryExpr [opcode='-'] \n            |-VarExpr \n              |-VarRef \n                |-Identifier [name=t] \n            |-IntLiteralExpr [val=1] \n        |-CallExpr \n          |-Identifier [name=fib] \n          |-BinaryExpr [opcode='-'] \n            |-VarExpr \n              |-VarRef \n                |-Identifier [name=t] \n            |-IntLiteralExpr [val=2] \n|-FuncDecl [hasBody=1] \n  |-TypeReference: [val=int] \n  |-Identifier [name=main] \n  |-ScopeStatement \n    |-ExprStmt \n      |-AssignmentExpr \n        |-VarRef \n          |-Identifier [name=i] \n        |-IntLiteralExpr [val=10] \n    |-ExprStmt \n      |-AssignmentExpr \n        |-VarRef \n          |-Identifier [name=result] \n        |-CallExpr \n          |-Identifier [name=fib] \n          |-VarExpr \n            |-VarRef \n              |-Identifier [name=i] \n    |-ExprStmt \n      |-CallExpr \n        |-Identifier [name=putint] \n        |-VarExpr \n          |-VarRef \n            |-Identifier [name=result] \n    |-ReturnStmt \n      |-IntLiteralExpr [val=0] \n", 2, False],
    ['private_tests/fib2.c', b"MiniCProg [syslibFlag=1] \n|-VarDecl \n  |-TypeReference: [val=int] \n  |-VarRef \n    |-Identifier [name=i] \n|-FuncDecl [hasBody=1] \n  |-TypeReference: [val=int] \n  |-Identifier [name=fib2] \n  |-Parameter \n    |-TypeReference: [val=int] \n    |-Identifier [name=n] \n  |-ScopeStatement \n    |-VarDecl \n      |-TypeReference: [val=int] \n      |-VarRef \n        |-Identifier [name=a] \n      |-VarRef \n        |-Identifier [name=b] \n      |-VarRef \n        |-Identifier [name=start] \n      |-VarRef \n        |-Identifier [name=c] \n    |-ExprStmt \n      |-AssignmentExpr \n        |-VarRef \n          |-Identifier [name=a] \n        |-IntLiteralExpr [val=0] \n    |-ExprStmt \n      |-AssignmentExpr \n        |-VarRef \n          |-Identifier [name=b] \n        |-IntLiteralExpr [val=1] \n    |-ExprStmt \n      |-AssignmentExpr \n        |-VarRef \n          |-Identifier [name=start] \n        |-IntLiteralExpr [val=0] \n    |-WhileStmt \n      |-BinaryExpr [opcode='<'] \n        |-VarExpr \n          |-VarRef \n            |-Identifier [name=start] \n        |-VarExpr \n          |-VarRef \n            |-Identifier [name=n] \n      |-ScopeStatement \n        |-ExprStmt \n          |-AssignmentExpr \n            |-VarRef \n              |-Identifier [name=c] \n            |-BinaryExpr [opcode='+'] \n              |-VarExpr \n                |-VarRef \n                  |-Identifier [name=a] \n              |-VarExpr \n                |-VarRef \n                  |-Identifier [name=b] \n        |-ExprStmt \n          |-AssignmentExpr \n            |-VarRef \n              |-Identifier [name=a] \n            |-VarExpr \n              |-VarRef \n                |-Identifier [name=b] \n        |-ExprStmt \n          |-AssignmentExpr \n            |-VarRef \n              |-Identifier [name=b] \n            |-VarExpr \n              |-VarRef \n                |-Identifier [name=c] \n        |-ExprStmt \n          |-AssignmentExpr \n            |-VarRef \n              |-Identifier [name=start] \n            |-BinaryExpr [opcode='+'] \n              |-VarExpr \n                |-VarRef \n                  |-Identifier [name=start] \n              |-IntLiteralExpr [val=1] \n    |-ReturnStmt \n      |-VarExpr \n        |-VarRef \n          |-Identifier [name=a] \n|-FuncDecl [hasBody=1] \n  |-TypeReference: [val=int] \n  |-Identifier [name=main] \n  |-ScopeStatement \n    |-ExprStmt \n      |-AssignmentExpr \n        |-VarRef \n          |-Identifier [name=i] \n        |-IntLiteralExpr [val=1] \n    |-WhileStmt \n      |-BinaryExpr [opcode='<'] \n        |-VarExpr \n          |-VarRef \n            |-Identifier [name=i] \n        |-IntLiteralExpr [val=10] \n      |-ScopeStatement \n        |-ExprStmt \n          |-CallExpr \n            |-Identifier [name=putint] \n            |-CallExpr \n              |-Identifier [name=fib2] \n              |-VarExpr \n                |-VarRef \n                  |-Identifier [name=i] \n        |-ExprStmt \n          |-AssignmentExpr \n            |-VarRef \n              |-Identifier [name=i] \n            |-BinaryExpr [opcode='+'] \n              |-VarExpr \n                |-VarRef \n                  |-Identifier [name=i] \n              |-IntLiteralExpr [val=1] \n    |-ReturnStmt \n      |-IntLiteralExpr [val=0] \n", 2, False],
    ['private_tests/break.c',     b"MiniCProg [syslibFlag=1] \n|-FuncDecl [hasBody=1] \n  |-TypeReference: [val=int] \n  |-Identifier [name=main] \n  |-ScopeStatement \n    |-VarDecl \n      |-TypeReference: [val=int] \n      |-VarRef \n        |-Identifier [name=ii] \n    |-VarDecl \n      |-TypeReference: [val=int] \n      |-VarRef \n        |-Identifier [name=jj] \n    |-ExprStmt \n      |-AssignmentExpr \n        |-VarRef \n          |-Identifier [name=ii] \n        |-IntLiteralExpr [val=0] \n    |-ExprStmt \n      |-AssignmentExpr \n        |-VarRef \n          |-Identifier [name=jj] \n        |-IntLiteralExpr [val=0] \n    |-ForStmt \n      |-AssignmentExpr \n        |-VarRef \n          |-Identifier [name=ii] \n        |-IntLiteralExpr [val=1] \n      |-BinaryExpr [opcode='<'] \n        |-VarExpr \n          |-VarRef \n            |-Identifier [name=ii] \n        |-IntLiteralExpr [val=50] \n      |-AssignmentExpr \n        |-VarRef \n          |-Identifier [name=ii] \n        |-BinaryExpr [opcode='+'] \n          |-VarExpr \n            |-VarRef \n              |-Identifier [name=ii] \n          |-IntLiteralExpr [val=1] \n      |-ScopeStatement \n        |-ExprStmt \n          |-AssignmentExpr \n            |-VarRef \n              |-Identifier [name=jj] \n            |-BinaryExpr [opcode='+'] \n              |-VarExpr \n                |-VarRef \n                  |-Identifier [name=jj] \n              |-VarExpr \n                |-VarRef \n                  |-Identifier [name=ii] \n        |-IfStmt \n          |-BinaryExpr [opcode='=='] \n            |-VarExpr \n              |-VarRef \n                |-Identifier [name=ii] \n            |-IntLiteralExpr [val=20] \n          |-ScopeStatement \n            |-IfStmt \n              |-BinaryExpr [opcode='<'] \n                |-VarExpr \n                  |-VarRef \n                    |-Identifier [name=ii] \n                |-IntLiteralExpr [val=21] \n              |-BreakStmt \n            |-ReturnStmt \n              |-IntLiteralExpr [val=1] \n    |-ReturnStmt \n      |-IntLiteralExpr [val=0] \n",2,     False],
    ["private_tests/operators.c",b"MiniCProg [syslibFlag=1] \n|-FuncDecl [hasBody=1] \n  |-TypeReference: [val=int] \n  |-Identifier [name=main] \n  |-ScopeStatement \n    |-VarDecl \n      |-TypeReference: [val=int] \n      |-VarRef \n        |-Identifier [name=a] \n    |-ExprStmt \n      |-AssignmentExpr \n        |-VarRef \n          |-Identifier [name=a] \n        |-IntLiteralExpr [val=59] \n    |-IfStmt \n      |-BinaryExpr [opcode='=='] \n        |-VarExpr \n          |-VarRef \n            |-Identifier [name=a] \n        |-IntLiteralExpr [val=59] \n      |-ScopeStatement \n        |-ExprStmt \n          |-CallExpr \n            |-Identifier [name=putint] \n            |-IntLiteralExpr [val=1] \n      |-ScopeStatement \n        |-ExprStmt \n          |-CallExpr \n            |-Identifier [name=putint] \n            |-UnaryExpr [opcode='-'] \n              |-IntLiteralExpr [val=1] \n    |-IfStmt \n      |-BinaryExpr [opcode='=='] \n        |-UnaryExpr [opcode='-'] \n          |-VarExpr \n            |-VarRef \n              |-Identifier [name=a] \n        |-UnaryExpr [opcode='-'] \n          |-IntLiteralExpr [val=59] \n      |-ScopeStatement \n        |-ExprStmt \n          |-CallExpr \n            |-Identifier [name=putint] \n            |-IntLiteralExpr [val=2] \n      |-ScopeStatement \n        |-ExprStmt \n          |-CallExpr \n            |-Identifier [name=putint] \n            |-UnaryExpr [opcode='-'] \n              |-IntLiteralExpr [val=2] \n    |-IfStmt \n      |-BinaryExpr [opcode='!='] \n        |-BinaryExpr [opcode='-'] \n          |-BinaryExpr [opcode='+'] \n            |-BinaryExpr [opcode='+'] \n              |-VarExpr \n                |-VarRef \n                  |-Identifier [name=a] \n              |-IntLiteralExpr [val=1] \n            |-IntLiteralExpr [val=2] \n          |-IntLiteralExpr [val=1] \n        |-IntLiteralExpr [val=61] \n      |-ScopeStatement \n        |-ExprStmt \n          |-CallExpr \n            |-Identifier [name=putint] \n            |-UnaryExpr [opcode='-'] \n              |-IntLiteralExpr [val=3] \n      |-ScopeStatement \n        |-ExprStmt \n          |-CallExpr \n            |-Identifier [name=putint] \n            |-IntLiteralExpr [val=3] \n    |-IfStmt \n      |-UnaryExpr [opcode='!'] \n        |-BinaryExpr [opcode='=='] \n          |-BinaryExpr [opcode='/'] \n            |-BinaryExpr [opcode='*'] \n              |-BinaryExpr [opcode='*'] \n                |-VarExpr \n                  |-VarRef \n                    |-Identifier [name=a] \n                |-IntLiteralExpr [val=10] \n              |-IntLiteralExpr [val=10] \n            |-IntLiteralExpr [val=20] \n          |-BinaryExpr [opcode='*'] \n            |-IntLiteralExpr [val=59] \n            |-IntLiteralExpr [val=5] \n      |-ScopeStatement \n        |-ExprStmt \n          |-CallExpr \n            |-Identifier [name=putint] \n            |-UnaryExpr [opcode='-'] \n              |-IntLiteralExpr [val=4] \n      |-ScopeStatement \n        |-ExprStmt \n          |-CallExpr \n            |-Identifier [name=putint] \n            |-IntLiteralExpr [val=4] \n    |-IfStmt \n      |-BinaryExpr [opcode='&&'] \n        |-BinaryExpr [opcode='&&'] \n          |-BoolLiteralExpr [val=1] \n          |-BoolLiteralExpr [val=0] \n        |-BoolLiteralExpr [val=0] \n      |-ScopeStatement \n        |-ExprStmt \n          |-CallExpr \n            |-Identifier [name=putint] \n            |-UnaryExpr [opcode='-'] \n              |-IntLiteralExpr [val=5] \n      |-ScopeStatement \n        |-ExprStmt \n          |-CallExpr \n            |-Identifier [name=putint] \n            |-IntLiteralExpr [val=5] \n    |-IfStmt \n      |-BinaryExpr [opcode='||'] \n        |-BinaryExpr [opcode='||'] \n          |-BoolLiteralExpr [val=0] \n          |-BoolLiteralExpr [val=1] \n        |-BoolLiteralExpr [val=0] \n      |-ScopeStatement \n        |-ExprStmt \n          |-CallExpr \n            |-Identifier [name=putint] \n            |-IntLiteralExpr [val=6] \n      |-ScopeStatement \n        |-ExprStmt \n          |-CallExpr \n            |-Identifier [name=putint] \n            |-UnaryExpr [opcode='-'] \n              |-IntLiteralExpr [val=6] \n    |-IfStmt \n      |-BinaryExpr [opcode='&&'] \n        |-BinaryExpr [opcode='&&'] \n          |-BinaryExpr [opcode='<'] \n            |-IntLiteralExpr [val=9] \n            |-IntLiteralExpr [val=10] \n          |-BinaryExpr [opcode='>'] \n            |-IntLiteralExpr [val=9] \n            |-IntLiteralExpr [val=10] \n        |-BinaryExpr [opcode='=='] \n          |-IntLiteralExpr [val=9] \n          |-IntLiteralExpr [val=9] \n      |-ScopeStatement \n        |-ExprStmt \n          |-CallExpr \n            |-Identifier [name=putint] \n            |-IntLiteralExpr [val=7] \n      |-ScopeStatement \n        |-ExprStmt \n          |-CallExpr \n            |-Identifier [name=putint] \n            |-UnaryExpr [opcode='-'] \n              |-IntLiteralExpr [val=7] \n    |-IfStmt \n      |-BinaryExpr [opcode='&&'] \n        |-BinaryExpr [opcode='&&'] \n          |-BinaryExpr [opcode='>'] \n            |-IntLiteralExpr [val=10] \n            |-IntLiteralExpr [val=9] \n          |-BinaryExpr [opcode='<'] \n            |-IntLiteralExpr [val=10] \n            |-IntLiteralExpr [val=9] \n        |-BinaryExpr [opcode='=='] \n          |-IntLiteralExpr [val=9] \n          |-IntLiteralExpr [val=9] \n      |-ScopeStatement \n        |-ExprStmt \n          |-CallExpr \n            |-Identifier [name=putint] \n            |-IntLiteralExpr [val=8] \n      |-ScopeStatement \n        |-ExprStmt \n          |-CallExpr \n            |-Identifier [name=putint] \n            |-UnaryExpr [opcode='-'] \n              |-IntLiteralExpr [val=8] \n    |-IfStmt \n      |-UnaryExpr [opcode='!'] \n        |-BinaryExpr [opcode='!='] \n          |-IntLiteralExpr [val=10] \n          |-IntLiteralExpr [val=10] \n      |-ScopeStatement \n        |-ExprStmt \n          |-CallExpr \n            |-Identifier [name=putint] \n            |-IntLiteralExpr [val=9] \n      |-ScopeStatement \n        |-ExprStmt \n          |-CallExpr \n            |-Identifier [name=putint] \n            |-UnaryExpr [opcode='-'] \n              |-IntLiteralExpr [val=9] \n    |-ReturnStmt \n      |-IntLiteralExpr [val=0] \n",2,     False],
    ["private_tests/while.c",     b"MiniCProg [syslibFlag=1] \n|-FuncDecl [hasBody=1] \n  |-TypeReference: [val=int] \n  |-Identifier [name=main] \n  |-ScopeStatement \n    |-VarDecl \n      |-TypeReference: [val=int] \n      |-VarRef \n        |-Identifier [name=J] \n      |-VarRef \n        |-Identifier [name=K] \n    |-VarDecl \n      |-TypeReference: [val=int] \n      |-VarRef \n        |-Identifier [name=A] \n        |-IntLiteralExpr [val=100] \n      |-VarRef \n        |-Identifier [name=B] \n        |-IntLiteralExpr [val=100] \n    |-VarDecl \n      |-TypeReference: [val=int] \n      |-VarRef \n        |-Identifier [name=i] \n    |-VarDecl \n      |-TypeReference: [val=int] \n      |-VarRef \n        |-Identifier [name=j] \n    |-ForStmt \n      |-AssignmentExpr \n        |-VarRef \n          |-Identifier [name=i] \n        |-IntLiteralExpr [val=0] \n      |-BinaryExpr [opcode='<'] \n        |-VarExpr \n          |-VarRef \n            |-Identifier [name=i] \n        |-IntLiteralExpr [val=100] \n      |-AssignmentExpr \n        |-VarRef \n          |-Identifier [name=i] \n        |-BinaryExpr [opcode='+'] \n          |-VarExpr \n            |-VarRef \n              |-Identifier [name=i] \n          |-IntLiteralExpr [val=1] \n      |-ScopeStatement \n        |-ForStmt \n          |-AssignmentExpr \n            |-VarRef \n              |-Identifier [name=j] \n            |-IntLiteralExpr [val=0] \n          |-BinaryExpr [opcode='<'] \n            |-VarExpr \n              |-VarRef \n                |-Identifier [name=j] \n            |-IntLiteralExpr [val=100] \n          |-AssignmentExpr \n            |-VarRef \n              |-Identifier [name=j] \n            |-BinaryExpr [opcode='+'] \n              |-VarExpr \n                |-VarRef \n                  |-Identifier [name=j] \n              |-IntLiteralExpr [val=1] \n          |-ExprStmt \n            |-AssignmentExpr \n              |-VarRef \n                |-Identifier [name=A] \n                |-VarExpr \n                  |-VarRef \n                    |-Identifier [name=i] \n              |-BinaryExpr [opcode='+'] \n                |-VarExpr \n                  |-VarRef \n                    |-Identifier [name=i] \n                |-VarExpr \n                  |-VarRef \n                    |-Identifier [name=j] \n    |-ExprStmt \n      |-AssignmentExpr \n        |-VarRef \n          |-Identifier [name=J] \n        |-IntLiteralExpr [val=0] \n    |-WhileStmt \n      |-BinaryExpr [opcode='<'] \n        |-VarExpr \n          |-VarRef \n            |-Identifier [name=J] \n        |-IntLiteralExpr [val=100] \n      |-ScopeStatement \n        |-ExprStmt \n          |-AssignmentExpr \n            |-VarRef \n              |-Identifier [name=K] \n            |-IntLiteralExpr [val=0] \n        |-WhileStmt \n          |-BinaryExpr [opcode='<'] \n            |-VarExpr \n              |-VarRef \n                |-Identifier [name=K] \n            |-IntLiteralExpr [val=100] \n          |-ExprStmt \n            |-AssignmentExpr \n              |-VarRef \n                |-Identifier [name=K] \n              |-BinaryExpr [opcode='+'] \n                |-VarExpr \n                  |-VarRef \n                    |-Identifier [name=K] \n                |-IntLiteralExpr [val=1] \n        |-IfStmt \n          |-BinaryExpr [opcode='=='] \n            |-VarExpr \n              |-VarRef \n                |-Identifier [name=B] \n                |-VarExpr \n                  |-VarRef \n                    |-Identifier [name=J] \n            |-VarExpr \n              |-VarRef \n                |-Identifier [name=A] \n                |-VarExpr \n                  |-VarRef \n                    |-Identifier [name=J] \n          |-BreakStmt \n        |-ExprStmt \n          |-AssignmentExpr \n            |-VarRef \n              |-Identifier [name=J] \n            |-BinaryExpr [opcode='+'] \n              |-VarExpr \n                |-VarRef \n                  |-Identifier [name=J] \n              |-IntLiteralExpr [val=1] \n    |-ExprStmt \n      |-CallExpr \n        |-Identifier [name=putint] \n        |-VarExpr \n          |-VarRef \n            |-Identifier [name=B] \n            |-IntLiteralExpr [val=0] \n    |-ExprStmt \n      |-CallExpr \n        |-Identifier [name=putint] \n        |-VarExpr \n          |-VarRef \n            |-Identifier [name=B] \n            |-IntLiteralExpr [val=1] \n    |-ExprStmt \n      |-CallExpr \n        |-Identifier [name=putint] \n        |-VarExpr \n          |-VarRef \n            |-Identifier [name=B] \n            |-IntLiteralExpr [val=2] \n    |-ExprStmt \n      |-CallExpr \n        |-Identifier [name=putint] \n        |-VarExpr \n          |-VarRef \n            |-Identifier [name=B] \n            |-IntLiteralExpr [val=3] \n    |-ExprStmt \n      |-CallExpr \n        |-Identifier [name=putint] \n        |-VarExpr \n          |-VarRef \n            |-Identifier [name=B] \n            |-IntLiteralExpr [val=4] \n    |-ReturnStmt \n      |-IntLiteralExpr [val=0] \n",2,False],
    ["private_tests/nest_break.c",b"MiniCProg [syslibFlag=1] \n|-FuncDecl [hasBody=1] \n  |-TypeReference: [val=bool] \n  |-Identifier [name=is_even] \n  |-Parameter \n    |-TypeReference: [val=int] \n    |-Identifier [name=x] \n  |-ScopeStatement \n    |-VarDecl \n      |-TypeReference: [val=int] \n      |-VarRef \n        |-Identifier [name=i] \n    |-ExprStmt \n      |-AssignmentExpr \n        |-VarRef \n          |-Identifier [name=i] \n        |-IntLiteralExpr [val=0] \n    |-WhileStmt \n      |-BinaryExpr [opcode='<'] \n        |-VarExpr \n          |-VarRef \n            |-Identifier [name=i] \n        |-VarExpr \n          |-VarRef \n            |-Identifier [name=x] \n      |-ScopeStatement \n        |-IfStmt \n          |-BinaryExpr [opcode='=='] \n            |-BinaryExpr [opcode='*'] \n              |-VarExpr \n                |-VarRef \n                  |-Identifier [name=i] \n              |-IntLiteralExpr [val=2] \n            |-VarExpr \n              |-VarRef \n                |-Identifier [name=x] \n          |-ReturnStmt \n            |-BoolLiteralExpr [val=1] \n        |-IfStmt \n          |-BinaryExpr [opcode='=='] \n            |-BinaryExpr [opcode='+'] \n              |-BinaryExpr [opcode='*'] \n                |-VarExpr \n                  |-VarRef \n                    |-Identifier [name=i] \n                |-IntLiteralExpr [val=2] \n              |-IntLiteralExpr [val=1] \n            |-VarExpr \n              |-VarRef \n                |-Identifier [name=x] \n          |-ReturnStmt \n            |-BoolLiteralExpr [val=0] \n        |-ExprStmt \n          |-AssignmentExpr \n            |-VarRef \n              |-Identifier [name=i] \n            |-BinaryExpr [opcode='+'] \n              |-VarExpr \n                |-VarRef \n                  |-Identifier [name=i] \n              |-IntLiteralExpr [val=1] \n    |-ReturnStmt \n      |-BoolLiteralExpr [val=0] \n|-FuncDecl [hasBody=1] \n  |-TypeReference: [val=int] \n  |-Identifier [name=main] \n  |-ScopeStatement \n    |-VarDecl \n      |-TypeReference: [val=int] \n      |-VarRef \n        |-Identifier [name=x] \n      |-VarRef \n        |-Identifier [name=y] \n      |-VarRef \n        |-Identifier [name=z] \n    |-VarDecl \n      |-TypeReference: [val=int] \n      |-VarRef \n        |-Identifier [name=i] \n      |-VarRef \n        |-Identifier [name=n] \n    |-ForStmt \n      |-ScopeStatement \n        |-ExprStmt \n          |-AssignmentExpr \n            |-VarRef \n              |-Identifier [name=x] \n            |-CallExpr \n              |-Identifier [name=getint] \n        |-IfStmt \n          |-BinaryExpr [opcode='=='] \n            |-VarExpr \n              |-VarRef \n                |-Identifier [name=x] \n            |-IntLiteralExpr [val=0] \n          |-ScopeStatement \n            |-BreakStmt \n        |-ExprStmt \n          |-AssignmentExpr \n            |-VarRef \n              |-Identifier [name=y] \n            |-CallExpr \n              |-Identifier [name=getint] \n        |-ExprStmt \n          |-AssignmentExpr \n            |-VarRef \n              |-Identifier [name=z] \n            |-CallExpr \n              |-Identifier [name=getint] \n        |-ExprStmt \n          |-AssignmentExpr \n            |-VarRef \n              |-Identifier [name=i] \n            |-IntLiteralExpr [val=0] \n        |-ExprStmt \n          |-AssignmentExpr \n            |-VarRef \n              |-Identifier [name=n] \n            |-IntLiteralExpr [val=0] \n        |-WhileStmt \n          |-BinaryExpr [opcode='<'] \n            |-VarExpr \n              |-VarRef \n                |-Identifier [name=i] \n            |-VarExpr \n              |-VarRef \n                |-Identifier [name=y] \n          |-ScopeStatement \n            |-IfStmt \n              |-CallExpr \n                |-Identifier [name=is_even] \n                |-BinaryExpr [opcode='+'] \n                  |-VarExpr \n                    |-VarRef \n                      |-Identifier [name=x] \n                  |-VarExpr \n                    |-VarRef \n                      |-Identifier [name=i] \n              |-ScopeStatement \n                |-ExprStmt \n                  |-CallExpr \n                    |-Identifier [name=putint] \n                    |-BinaryExpr [opcode='+'] \n                      |-VarExpr \n                        |-VarRef \n                          |-Identifier [name=x] \n                      |-VarExpr \n                        |-VarRef \n                          |-Identifier [name=i] \n                |-ExprStmt \n                  |-AssignmentExpr \n                    |-VarRef \n                      |-Identifier [name=n] \n                    |-BinaryExpr [opcode='+'] \n                      |-VarExpr \n                        |-VarRef \n                          |-Identifier [name=n] \n                      |-IntLiteralExpr [val=1] \n            |-IfStmt \n              |-BinaryExpr [opcode='>='] \n                |-VarExpr \n                  |-VarRef \n                    |-Identifier [name=n] \n                |-VarExpr \n                  |-VarRef \n                    |-Identifier [name=z] \n              |-ScopeStatement \n                |-BreakStmt \n            |-ExprStmt \n              |-AssignmentExpr \n                |-VarRef \n                  |-Identifier [name=i] \n                |-BinaryExpr [opcode='+'] \n                  |-VarExpr \n                    |-VarRef \n                      |-Identifier [name=i] \n                  |-IntLiteralExpr [val=1] \n    |-ReturnStmt \n      |-IntLiteralExpr [val=0] \n",2,     False],
]

def main():
    test = marker.Core('Assignment 3 Private Tester', 20)

    # Try to build source code from supplied path
    test.build_submission()

    # All tests
    for case in test_cases:
        # Build test path
        test_path = [test.exec_path]
        test_path.append(test_opt)
        test_path.append(abs_path+case[0])
        # Supply the executable and test program path
        test.start_test(test_path)
        if test.actual:
            # Ignore anything in brackets for A3 AST
            test.actual = re.sub(r"\(.*?\)","", str(test.actual))
            expected_output = re.sub(r"\(.*?\)","", str(case[1]))
            test.check_output(expected_output, case[2], case[3])

if __name__ == '__main__':
    main()
    